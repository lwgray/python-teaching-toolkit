{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Teaching Toolkit","text":"<p>Welcome to a comprehensive collection of Python programming educational materials, focusing on practical learning through clear explanations and real-world examples.</p>"},{"location":"#quick-navigation","title":"Quick Navigation","text":"<ul> <li> <p> Python Delimiters</p> <ul> <li>Learn when to use (), [], and {}</li> <li>Interactive examples and exercises</li> <li>Complete guide with mnemonics</li> </ul> </li> <li> <p> Machine Learning</p> <ul> <li>Coming soon</li> <li>ML fundamentals and applications</li> <li>Practical implementations</li> </ul> </li> <li> <p> Artificial Intelligence</p> <ul> <li>Coming soon</li> <li>AI concepts and principles</li> <li>Real-world applications</li> </ul> </li> </ul>"},{"location":"#available-resources","title":"Available Resources","text":"<ul> <li>Python Fundamentals<ul> <li>Delimiters Guide<ul> <li>Complete Guide</li> <li>Practice Exercises</li> </ul> </li> </ul> </li> </ul> <p>[More topics coming soon...]</p>"},{"location":"#how-to-use-this-site","title":"How to Use This Site","text":"<ol> <li>Use the navigation tabs at the top to choose a main topic</li> <li>Select specific subjects from the left sidebar</li> <li>Browse the table of contents on the right for quick jumps within a page</li> </ol>"},{"location":"python/fundamentals/delimiters/","title":"Python Delimiters","text":"<p>This lesson is available in multiple formats:</p>"},{"location":"python/fundamentals/delimiters/#reading-formats","title":"\ud83d\udcda Reading Formats","text":"<ul> <li>Web/Markdown Version - Best for online reading</li> <li>PDF Version - Printable format</li> </ul>"},{"location":"python/fundamentals/delimiters/#teaching-resources","title":"\ud83c\udfaf Teaching Resources","text":"<ul> <li>Practice Exercises</li> </ul>"},{"location":"python/fundamentals/delimiters/#usage-tips","title":"\ud83d\udca1 Usage Tips","text":"<ul> <li>For students: Start with the web version</li> <li>For teachers: Check the PDF for print-friendly materials</li> </ul>"},{"location":"python/fundamentals/delimiters/delimiters/","title":"Understanding Python Delimiters: A 5-Minute Mini-Lecture","text":""},{"location":"python/fundamentals/delimiters/delimiters/#introduction-30-seconds","title":"Introduction (30 seconds)","text":"<p>Hey programmers! Today we're going to decode one of Python's most important concepts: delimiters. You see these symbols everywhere in code - (), [], and {} - but when do you use which one? By the end of this lecture, you'll have a foolproof way to remember their specific purposes and uses!</p>"},{"location":"python/fundamentals/delimiters/delimiters/#the-three-types-of-delimiters-1-minute","title":"The Three Types of Delimiters (1 minute)","text":""},{"location":"python/fundamentals/delimiters/delimiters/#parentheses","title":"Parentheses ( )","text":"<p>Think of these as the \"action\" delimiters. They're used when Python needs to DO something. Just like when you call someone to take action, parentheses are used to call functions into action, group mathematical operations, and create tuples.</p>"},{"location":"python/fundamentals/delimiters/delimiters/#square-brackets","title":"Square Brackets [ ]","text":"<p>These are your \"access\" delimiters. Imagine them as an address or index card in a library. When you need to find, access, or modify specific elements in a sequence or mapping type, square brackets are your navigation tool.</p>"},{"location":"python/fundamentals/delimiters/delimiters/#curly-braces","title":"Curly Braces { }","text":"<p>These are your \"collection\" delimiters. They define and contain related items together, creating structured data types like dictionaries and sets, or formatting strings.</p>"},{"location":"python/fundamentals/delimiters/delimiters/#the-magic-mnemonic-1-minute","title":"The Magic Mnemonic (1 minute)","text":"<p>Here's an easy way to remember when to use each delimiter. Think of this sentence:</p> <p>\"Please Call Me Today, Let's Inspect Some Data, Don't Send Flowers\"</p> <p>Each part of this sentence maps to a different delimiter type and its uses:</p>"},{"location":"python/fundamentals/delimiters/delimiters/#first-part-parentheses","title":"First Part - Parentheses ( )","text":"<p>\"Please Call Me Today\" - Please \u2192 Parameters: <code>print(\"hello\")</code> - Call \u2192 Function calls: <code>len(list)</code> - Me \u2192 Math operations: <code>(2 + 3)</code> - Today \u2192 Tuples: <code>(x, y)</code></p>"},{"location":"python/fundamentals/delimiters/delimiters/#second-part-square-brackets","title":"Second Part - Square Brackets [ ]","text":"<p>\"Let's Inspect Some Data\" - Let's \u2192 List creation: <code>[1, 2, 3]</code> - Inspect \u2192 Index access: <code>list[0]</code> - Some \u2192 Slicing: <code>list[1:3]</code> - Data \u2192 Dictionary access: <code>dict['key']</code></p>"},{"location":"python/fundamentals/delimiters/delimiters/#third-part-curly-braces","title":"Third Part - Curly Braces { }","text":"<p>\"Don't Send Flowers\" - Don't \u2192 Dictionary creation: <code>{'key': 'value'}</code> - Send \u2192 Set creation: <code>{1, 2, 3}</code> - Flowers \u2192 Format strings: <code>f\"{variable}\"</code></p>"},{"location":"python/fundamentals/delimiters/delimiters/#real-world-examples-15-minutes","title":"Real-World Examples (1.5 minutes)","text":"<p>Let's see these delimiters in action:</p> <pre><code># Parentheses ( ) - \"Please Call Me Today\"\nprint(\"Hello, World!\")          # Please - Parameters\nlen(my_list)                    # Call - Function calls\nresult = (10 + 5) * 2          # Me - Math\ncoordinates = (x, y)            # Today - Tuples\n\n# Square Brackets [ ] - \"Let's Inspect Some Data\"\nfruits = [\"apple\", \"banana\"]    # Let's - List creation\nfirst_fruit = fruits[0]         # Inspect - Index access\nsome_fruits = fruits[1:3]       # Some - Slicing\nuser_data[\"name\"]               # Data - Dictionary access\n\n# Curly Braces { } - \"Don't Send Flowers\"\nperson = {\"name\": \"Alice\"}      # Don't - Dictionary creation\nunique_numbers = {1, 2, 3}      # Send - Set creation\nmessage = f\"{person['name']}\"   # Flowers - Format strings\n</code></pre>"},{"location":"python/fundamentals/delimiters/delimiters/#quick-check-1-minute","title":"Quick Check (1 minute)","text":"<p>Which delimiter would you use to: 1. Group a mathematical expression? 2. Access a specific index in a list? 3. Define a new dictionary?</p> <p>The answers should jump out at you using our mnemonic!</p>"},{"location":"python/fundamentals/delimiters/delimiters/#practice-exercise","title":"Practice Exercise","text":"<p>Now let's put this into practice! Add the correct delimiters to make this code work:</p> <pre><code># 1. Function Calls and Parameters\nprint \"Hello\"                        # Fix function call\ncalculate_sum 5, 10                  # Fix function call with multiple parameters\nlen \"Python\"                         # Fix built-in function call\n\n# 2. List and Dictionary Access\nshopping_list = \"apples\", \"bananas\"  # Create a list\nfirst_item = shopping_list 0         # Access first item\nfruits = \"apple\": \"red\"              # Create a dictionary\nfruit_color = fruits \"apple\"         # Access dictionary value\n\n# 3. Collections\nunique_numbers =  1, 2, 2, 3         # Create a set (notice duplicates)\npoint =  x, y                        # Create a tuple\ngrades = \"math\": 95                  # Create a dictionary\n\n# 4. Combined Usage\ndef calculate_average scores :        # Fix function definition\n    total = sum scores               # Fix function call\n    return total / len scores        # Fix function call\n\nstudent_data = \n    \"name\": \"Alice\",\n    \"grades\":  90, 95, 88\n</code></pre>"},{"location":"python/fundamentals/delimiters/delimiters/#python-delimiters-quick-reference","title":"Python Delimiters Quick Reference","text":"Delimiter Use Case Example Description Memory Hook Parentheses ( ) Function Calls <code>print(\"Hello\")</code> Execute functions Please - Parameters Function Parameters <code>def greet(name):</code> Define function inputs Call - Function calls Math Operations <code>(2 + 3) * 4</code> Control order of operations Me - Math grouping Tuples <code>point = (x, y)</code> Create immutable sequences Today - Tuples Generator Expressions <code>(x for x in range(5))</code> Create iterators Square Brackets [ ] List Creation <code>[1, 2, 3]</code> Create mutable lists Let's - Lists Index Access <code>list[0]</code> Access single elements Inspect - Indexing Slicing <code>list[1:3]</code> Extract subsequences Some - Slicing Dictionary Access <code>dict[\"key\"]</code> Access dictionary values Data - Dict access List Comprehension <code>[x*2 for x in range(5)]</code> Create lists from expressions Multi-dimensional <code>matrix[0][1]</code> Access nested structures Curly Braces { } Dictionary Creation <code>{\"name\": \"Alice\"}</code> Create key-value pairs Don't - Dictionaries Sets <code>{1, 2, 3}</code> Create unique collections Send - Sets F-strings <code>f\"{variable}\"</code> Format strings Flowers - Formatting Dict Comprehension <code>{x: x**2 for x in range(3)}</code> Create dictionaries from expressions Set Comprehension <code>{x%2 for x in range(5)}</code> Create sets from expressions Nested Structures <code>{'points': {'x': 1}}</code> Create complex data structures"}]}